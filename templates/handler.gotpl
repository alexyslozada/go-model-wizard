package {{.Name}}

import (
	"database/sql"
	"net/http"
	"strconv"

	"github.com/labstack/echo"

    "github.com/alexyslozada/config-go"
	log "github.com/alexyslozada/logger-go"
    message "github.com/alexyslozada/messages-go"
)

// Handler estructura que tiene los handler de {{.Name}}
type Handler struct {
    Configuration *config.Configuration
    DB            *sql.DB
    Logger        *log.Model
}

// NewHandler devuelve un puntero a Handler.
func NewHandler(c *config.Configuration, db *sql.DB, l *log.Model) *Handler {
    return &Handler{c, db, l}
}

// Create handler para crear un registro de {{.Name}}
func (h *Handler) Create(c echo.Context) error {
	mr := message.ResponseMessage{}
	m := &Model{}

	err := c.Bind(m)
	if err != nil {
        h.Logger.Warning.Printf("la estructura {{.Name}} no es correcta. Handler {{.Name}}.Create: %v", err)
		mr.AddError(
			strconv.Itoa(http.StatusBadRequest), 
			"¡Upps! debes enviarnos una estructura valida", 
			"revisa la documentación del paquete",
		)
        return c.JSON(http.StatusBadRequest, mr)
	}

	ms := NewStore(h.Configuration, h.DB, h.Logger)
	err = ms.Create(m)
	if err != nil {
		h.Logger.Error.Printf("no se pudo registrar el modelo. Handler {{.Name}}.Create: %v", err)
        mr.AddError(
			strconv.Itoa(http.StatusInternalServerError), 
			"¡Upps! no pudimos crear el registro", 
			"para descubrir que sucedio revisa los log del servicio",
		)
		return c.JSON(http.StatusInternalServerError, mr)
	}

	mr.AddMessage(strconv.Itoa(http.StatusCreated), "¡listo!", "")
    mr.Data = m

    return c.JSON(http.StatusCreated, mr)
}

// Update handler para actualizar un registro de {{.Name}}
func (h *Handler) Update(c echo.Context) error {
	mr := message.ResponseMessage{}
	m := &Model{}

	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		h.Logger.Warning.Printf("el id debe ser numérico. Handler {{.Name}}.Update: %v", err)
		mr.AddError(
			strconv.Itoa(http.StatusBadRequest), 
			"¡Upps! el id que nos enviaste no es un número entero", 
			"",
		)
		return c.JSON(http.StatusBadRequest, mr)
	}

	err = c.Bind(m)
	if err != nil {
		h.Logger.Warning.Printf("la estructura no es correcta. Handler {{.Name}}.Update: %v", err)
		mr.AddError(
			strconv.Itoa(http.StatusBadRequest), 
			"¡Upps! debes enviarnos una estructura valida", 
			"revisa la documentación del paquete",
		)
		return c.JSON(http.StatusBadRequest, mr)
	}

    ms := NewStore(h.Configuration, h.DB, h.Logger)
	m.ID = uint(id)
	err = ms.Update(m.ID, m)
	if err != nil {
		h.Logger.Error.Printf("error al actualizar. Handler {{.Name}}.Update: %v", err)
		mr.AddError(
			strconv.Itoa(http.StatusInternalServerError), 
			"¡Upps! no pudimos actualizar el registro", 
			"para descubrir que sucedio revisa los log del servicio",
		)
		return c.JSON(http.StatusInternalServerError, mr)
	}

	mr.AddMessage(strconv.Itoa(http.StatusOK), "¡listo!", "")
	mr.Data = m

	return c.JSON(http.StatusOK, mr)
}

// Delete handler para eliminar un registro de {{.Name}}
func (h *Handler) Delete(c echo.Context) error {
	mr := message.ResponseMessage{}

	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		h.Logger.Warning.Printf("el id debe ser numérico. Handler {{.Name}}.Delete: %v", err)
		mr.AddError(
			strconv.Itoa(http.StatusBadRequest), 
			"¡Upps! el id que nos enviaste no es un número entero", 
			"",
		)
		return c.JSON(http.StatusBadRequest, mr)
	}

    ms := NewStore(h.Configuration, h.DB, h.Logger)
	err = ms.Delete(uint(id))
	if err != nil {
		h.Logger.Error.Printf("error al borrar el id: %d. Handler {{.Name}}.Delete: %v", id, err)
		mr.AddError(
			strconv.Itoa(http.StatusInternalServerError), 
			"¡Upps! no pudimos eliminar el registro", 
			"para descubrir que sucedio revisa los log del servicio",
		)
		return c.JSON(http.StatusInternalServerError, mr)
	}

	mr.AddMessage(strconv.Itoa(http.StatusOK), "¡listo!", "")

	return c.JSON(http.StatusOK, mr)
}

// GetByID handler para obtener un registro de {{.Name}}
func (h *Handler) GetByID(c echo.Context) error {
	mr := message.ResponseMessage{}

	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		h.Logger.Warning.Printf("el id debe ser numérico. Handler {{.Name}}.GetByID: %v", err)
		mr.AddError(
			strconv.Itoa(http.StatusBadRequest), 
			"¡Upps! el id que nos enviaste no es un número entero", 
			"",
		)
		return c.JSON(http.StatusBadRequest, mr)
	}

    ms := NewStore(h.Configuration, h.DB, h.Logger)
	res, err := ms.GetByID(uint(id))
	if err == sql.ErrNoRows {
		mr.AddMessage(
			strconv.Itoa(http.StatusNoContent), 
			"nos dimos cuenta que no tenemos datos para este id", 
			"",
		)
		return c.JSON(http.StatusOK, mr)
	}
	if err != nil {
		h.Logger.Error.Printf("no se pudo obtener los datos solicitados del id: %d. Handler {{.Name}}.GetByID: %v", id, err)
		mr.AddError(
			strconv.Itoa(http.StatusInternalServerError), 
			"¡Upps! no pudimos consultar la información", 
			"para descubrir que sucedio revisa los log del servicio",
		)
		return c.JSON(http.StatusInternalServerError, mr)
	}

	mr.AddMessage(strconv.Itoa(http.StatusOK), "¡listo!", "")
	mr.Data = res

	return c.JSON(http.StatusOK, mr)
}

// GetAll handler para obtener todos los registro de {{.Name}}
func (h *Handler) GetAll(c echo.Context) error {
	mr := message.ResponseMessage{}

    ms := NewStore(h.Configuration, h.DB, h.Logger)
	res, err := ms.GetAll()
	if err != nil {
		h.Logger.Error.Printf("no se pudo obtener la información. Handler {{.Name}}.GetAll: %v", err)
		mr.AddError(
			strconv.Itoa(http.StatusInternalServerError), 
			"¡Upps! no pudimos consultar la información", 
			"para descubrir que sucedio revisa los log del servicio",
		)
		return c.JSON(http.StatusInternalServerError, mr)
	}

	mr.AddMessage(strconv.Itoa(http.StatusOK), "¡listo!", "")
	mr.Data = res

	return c.JSON(http.StatusOK, mr)
}
