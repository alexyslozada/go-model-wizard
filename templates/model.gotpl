package {{.Name}}

import (
    "time"
    "database/sql"

	log "github.com/alexyslozada/logger-go"
)

// Model estructura de {{.Name}} 
type Model struct {
        ID uint `json:"id"`
        {{range .Fields -}}
        {{ucc .Name}} {{.Type}} `json:"{{.Name}}"`
        {{end -}}
        CreatedAt time.Time `json:"created_at"`
        UpdatedAt time.Time `json:"updated_at"`
}

// Models slice de punteros a {{.Name}}
type Models []*Model

// ModelStore administra el acceso a los datos de {{.Name}}
type ModelStore struct {
        Storage Storage
}

// NewStore debe invocarse para obtener un ModelStore
// esta función configura el storage para conectarse a la BD
func NewStore(engine string, db *sql.DB, l *log.Model) *ModelStore {
    ms := &ModelStore{}
    ms.Storage = newStorage(engine, db, l)
    return ms
}

// Create método para crear un registro de {{.Name}}
func (ms *ModelStore) Create(m *Model) error {
	return ms.Storage.Create(m)
}

// Update método para actualizar un registro de {{.Name}}
func (ms *ModelStore) Update(ID uint, m *Model) error {
	return ms.Storage.Update(ID, m)
}

// Delete método para eliminar un registro de {{.Name}}
func (ms *ModelStore) Delete(ID uint) error {
	return ms.Storage.Delete(ID)
}

// GetByID método para obtener un registro de {{.Name}}
func (ms *ModelStore) GetByID(ID uint) (*Model, error) {
	return ms.Storage.GetByID(ID)
}

// GetAll método para obtener todos los registro de {{.Name}}
func (ms *ModelStore) GetAll() (Models, error) {
	return ms.Storage.GetAll()
}
